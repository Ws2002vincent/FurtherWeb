html
    head
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Game Session
        script(src="https://cdn.socket.io/4.7.4/socket.io.min.js")
        script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js")
        script(src="https://unpkg.com/html5-qrcode@2.3.8")
        style.
            .question-modal {
                display: none;
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0,0,0,0.2);
                z-index: 1000;
            }
            .option-btn {
                display: block;
                margin: 10px 0;
                padding: 10px;
                width: 100%;
            }
            .rankings-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }
            .rankings-table th, .rankings-table td {
                border: 1px solid #ddd;
                padding: 8px;
            }
            .rankings-table th {
                background-color: #f2f2f2;
                text-align: left;
            }

            .rankings-container {
                position: fixed;
                top: 20px;
                right: 20px;
                background: white;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
                max-width: 300px;
            }

            .rankings-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 10px;
            }

            .rankings-table th,
            .rankings-table td {
                padding: 8px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }

            .rankings-table tr:nth-child(1) {
                background-color: #FFD700;
            }

            .rankings-table tr:nth-child(2) {
                background-color: #C0C0C0;
            }

            .rankings-table tr:nth-child(3) {
                background-color: #CD7F32;
            }

            #endGameBtn {
                background: #f44336;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                margin-top: 20px;
            }

            #scanBtn {
                background: #2196F3;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                margin-bottom: 20px;
            }

            .game-container {
                max-width: 800px;
                margin: 20px auto;
                padding: 20px;
                background: white;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
            }
    body
        .game-container
            h2 Game Session
            p Player: #{username}
            p Score: #[span#playerScore #{score}]
            
            button#scanBtn Scan Question Card
            #reader

            #questionModal.question-modal
                h3#questionText
                form#answerForm
                    #options
                    button#submitAnswer(type="submit") Submit Answer

            if is_host
                button#endGameBtn End Game

        .rankings-container
            h3 Current Rankings
            #rankingsList

        script.
            $(document).ready(function() {
                // Update Socket.IO connection
                const socket = io('http://localhost:3000');
                const sessionId = '#{sessionId}';
                let checkGameStatus;

                socket.on('connect', () => {
                    console.log('Connected to socket server');
                    socket.emit('joinGame', sessionId);
                });

                socket.on('redirectToCalculation', (data) => {
                    console.log('Received redirect signal');
                    window.location.href = `/calculation/${sessionId}`;
                });

                let html5QrcodeScanner = null;
                let currentCardId = null;

                $('#scanBtn').click(function() {
                    if (!html5QrcodeScanner) {
                        const config = {
                            fps: 10,
                            qrbox: { width: 250, height: 250 }
                        };

                        html5QrcodeScanner = new Html5QrcodeScanner("reader", config);
                        html5QrcodeScanner.render(onScanSuccess, onScanError);
                    }
                });

                function onScanSuccess(decodedText) {
                    currentCardId = decodedText;
                    console.log('QR Code detected:', currentCardId);
                    
                    $.get(`/gamesession/question/${currentCardId}`, function(response) {
                        if (response.success) {
                            showQuestion(response.question);
                            if (html5QrcodeScanner) {
                                html5QrcodeScanner.clear();
                                html5QrcodeScanner = null;
                            }
                        } else {
                            alert('Invalid QR code');
                        }
                    });
                }

                function showQuestion(question) {
                    $('#questionText').text(question.question_description);
                    
                    const options = {
                        'A': question.option_a,
                        'B': question.option_b,
                        'C': question.option_c,
                        'D': question.option_d
                    };

                    let optionsHtml = '';
                    Object.entries(options).forEach(([key, value]) => {
                        optionsHtml += `
                            <div class="option">
                                <input type="radio" name="answer" value="${key}" id="option${key}">
                                <label for="option${key}">${key}: ${value}</label>
                            </div>
                        `;
                    });
                    
                    $('#options').html(optionsHtml);
                    $('#questionModal').show();
                }

                $('#answerForm').on('submit', function(e) {
                    e.preventDefault();
                    
                    const selectedAnswer = $('input[name="answer"]:checked').val();
                    if (!selectedAnswer) {
                        alert('Please select an answer');
                        return;
                    }

                    $.post('/gamesession/answer', {
                        cardId: currentCardId,
                        sessionId: '#{sessionId}',
                        answer: selectedAnswer
                    }, function(response) {
                        if (response.success) {
                            $('#playerScore').text(response.newScore);
                            alert(response.correct ? 
                                `Correct! You earned ${response.scoreChange} points!` : 
                                `Wrong! You lost 50 points!`);
                            $('#questionModal').hide();
                            $('#answerForm')[0].reset();
                            updateRankings(); // Update rankings immediately after answer
                        } else {
                            alert(response.error || 'Error submitting answer');
                        }
                    });
                });

                // Update end game button handler
                $('#endGameBtn').click(function() {
                    if(confirm('Are you sure you want to end the game?')) {
                        $.post(`/gamesession/endgame/${sessionId}`, function(response) {
                            if(response.success) {
                                console.log('Emitting gameEnded event');
                                socket.emit('gameEnded', sessionId);
                                setTimeout(() => {
                                    window.location.href = `/calculation/${sessionId}`;
                                }, 500);
                            } else {
                                alert('Error ending game: ' + (response.error || 'Unknown error'));
                            }
                        });
                    }
                });

                // Add polling as backup
                checkGameStatus = setInterval(() => {
                    $.get(`/gamesession/status/${sessionId}`, function(data) {
                        if(data.status === 'completed') {
                            clearInterval(checkGameStatus);
                            window.location.href = `/calculation/${sessionId}`;
                        }
                    });
                }, 1000);

                // Clear interval when leaving page
                $(window).on('beforeunload', function() {
                    clearInterval(checkGameStatus);
                });

                function updateRankings() {
                    $.get(`/gamesession/rankings/#{sessionId}`, function(data) {
                        let rankingsHtml = '<table class="rankings-table">';
                        rankingsHtml += '<tr><th>Position</th><th>Player</th><th>Score</th></tr>';
                        
                        data.rankings.forEach(player => {
                            rankingsHtml += `
                                <tr>
                                    <td>#${player.current_position}</td>
                                    <td>${player.username}</td>
                                    <td>${player.score}</td>
                                </tr>
                            `;
                        });
                        
                        rankingsHtml += '</table>';
                        $('#rankingsList').html(rankingsHtml);
                    });
                }

                // Initial rankings update and start polling
                updateRankings();
                setInterval(updateRankings, 1000);

                function onScanError(error) {
                    console.warn('QR Code scan error:', error);
                }
            });
